name: Release

on:
  push:
    branches:
      - main

jobs:
  create-changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Install dependencies
        run: npm install

      - name: Set up Git user
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Run standard-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx standard-version --no-verify

  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get current version
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, octokit } = require('@actions/github');
            const { data } = await octokit.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const currentVersion = data.tag_name.replace('v', '');
            const versionParts = currentVersion.split('.');
            const nextVersion = `${versionParts[0]}.${versionParts[1]}.${parseInt(versionParts[2]) + 1}`;
            console.log(`Current version: ${currentVersion}`);
            console.log(`Next version: ${nextVersion}`);
            core.setOutput('next_version', nextVersion);

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ steps.get_current_version.outputs.next_version }}
          release_name: Release ${{ steps.get_current_version.outputs.next_version }}
          body: |
            This is a new release.
          draft: false
          prerelease: false

      - name: Publish release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*
          asset_name: my-release-assets.zip
          asset_content_type: application/zip

      - name: Create release notes
        run: |
          release_notes="$(cat CHANGELOG.md)"
          gh release edit ${{ github.ref }} --notes "$release_notes"
